package client;

import org.osgi.framework.BundleContext;

public class ThreadClient extends Thread {

	// Délai entre chaque commande
	public static final int delai = 10000;
	// Context du bundle lié au Thread
	private BundleContext context = null;

	/**
		 * Constructeur, le Thread a besoin du BundleContext pour rechercher le
		 * service
		 *
		 * @param aContext
		 */
		public ThreadClient(BundleContext aContext) {
			context = aContext;
		}

	/**
	 * Méthode run qui sera appelée par the Thread.start()
	 */
	public void run() {
		System.out.println("Demarrage du Thread User");
		int carId = 1;
		while (true) {
			try {
				repairCar(carId++);
			} catch (InvalidSyntaxException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			try {
				sleep(delay);
			} catch (InterruptedException e) {
			}
		}
	}

	/**
	 * Implémentation des Traitements du Thread
	 * 
	 * @throws InvalidSyntaxException
	 */
	private void repairCar(int carId) throws InvalidSyntaxException {
		// Création d'une voiture
		Car aCar = null;
		if (Math.random() > 0.5) {
			aCar = new Megane(carId);
		} else {
			aCar = new Lada(carId);
		}
		// Récupération du service
		Collection<ServiceReference<CarRepairer>> carRepairersSRs = context.getServiceReferences(CarRepairer.class,
				null);
		for (ServiceReference<CarRepairer> carRepart : carRepairersSRs) {
			if (carRepart == null) {
				System.out.println("\n**************\nAucun service disponible");
			} else {
				System.out.println("\n**************\nAppel du service:" + carRepart.getClass() + "\nDu bundle:"
						+ carRepart.getBundle().getSymbolicName() + "\nPour la voiture:" + aCar.getId() + ","
						+ aCar.getClass() + "," + aCar.getCurrentStatus());
				CarRepairer myService = context.getService(carRepart);
				// Appel du service
				try {
					myService.repairCar(aCar);
					System.out.println(
							"La voiture a bien été traitée : " + aCar.getClass() + ":" + aCar.getCurrentStatus());
				} catch (CarRepairException e) {
					System.out.println("Erreur la voiture n'est pas au bon statut pour ce service : " + aCar.getClass()
							+ ":" + aCar.getCurrentStatus());
				}
				// Libération du service
				context.ungetService(carRepart);
			}
		}

	}

}
